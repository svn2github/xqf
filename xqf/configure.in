#
# Autoconf support for XQF
# Initially written by Markus Fischer <mfischer@josefine.ben.tuwien.ac.at>
#

AC_INIT([xqf],[0.9.14],xqf-developer@lists.sourceforge.net)
AC_CONFIG_SRCDIR([src/xqf.c])
AC_PREREQ(2.52)

AM_INIT_AUTOMAKE
dnl AM_CONFIG_HEADER(src/gnuconfig.h:src/gnuconfig.h.in)
AM_CONFIG_HEADER(src/gnuconfig.h)

AC_DEFINE(GETTEXT_PACKAGE, "xqf", [Gettext domain name])
GETTEXT_PACKAGE=xqf
AC_SUBST(GETTEXT_PACKAGE)

AC_PROG_INTLTOOL([0.25])
ALL_LINGUAS="ca da de es fr ru"
AM_GLIB_GNU_GETTEXT

dnl Checks for programs.
AC_PROG_CC
AC_ISC_POSIX

AC_PROG_LIBTOOL

dnl Checks for header files.
AC_HEADER_STDC

#The Release stuff for the spec file.
RELEASE="1"
AC_ARG_WITH(rpm_release,[  --with-rpm-release=VAL       RPM Release (e.g. 1mdk)])
if test "x$with_rpm_release" != "x" ; then
	RELEASE="$with_rpm_release"
fi
AC_SUBST(RELEASE)

dnl compile with gtk 1.2 or gtk 2 ?
AC_MSG_CHECKING([whether GTK 2 should be used])
AC_ARG_ENABLE(gtk2,[  --enable-gtk2      enable experimental GTK2 support (default=no)],USE_GTK2=$enableval, USE_GTK2=no)
AC_MSG_RESULT([$USE_GTK2])

if test "x$USE_GTK2" != "xno"; then

        AC_DEFINE_UNQUOTED(USE_GTK2,1,Define if we should use GTK2)

        OLD_GTK_SUPPORT="-DGTK_ENABLE_BROKEN=1"
        AC_SUBST(OLD_GTK_SUPPORT)        

        pkg_modules="gtk+-2.0 >= 2.0.0"
        PKG_CHECK_MODULES(PACKAGE, [$pkg_modules])
        AC_SUBST(PACKAGE_CFLAGS)
        AC_SUBST(PACKAGE_LIBS)                
else

        AM_PATH_GLIB(1.2.0,,exit 1)
        AM_PATH_GTK(1.2.0,,exit 1)
        AM_PATH_GDK_PIXBUF(,,[AC_MSG_ERROR([gdk-pixbuf not found, please install gdk-pixbuf-devel])])

fi

dnl check for qstat
AC_ARG_WITH(qstat,[  --with-qstat=CMD        use CMD to run qstat])

AC_MSG_CHECKING(qstat version)

QSTATEXEC="qstat"

if test "x$with_qstat" != "x" ; then
	QSTATEXEC="$with_qstat"
fi

qstat_version=`$QSTATEXEC 2>/dev/null | grep version | cut -d' ' -f 3`

if test "x$qstat_version" = "x" ; then
	AC_MSG_RESULT(qstat not found)
	qstat_is=notfound
else
	AC_MSG_RESULT($qstat_version)
fi

AC_SUBST(QSTATEXEC)

case "$qstat_version" in
	2.0*|2.1*|2.3*|2.4a|2.4b|2.4c|2.4d)
	qstat_is=tooold
	;;
esac

QSTAT23="-DQSTAT23 -DQSTAT_HAS_UNREAL_SUPPORT"

AC_SUBST(QSTAT23)

AC_CHECK_HEADER(zlib.h,,[AC_MSG_ERROR([zlib.h not found, please install zlib development files])])
AC_CHECK_LIB(z, crc32,,[AC_MSG_ERROR([libz not found])])

dnl determine if we should include readline support...
dnl ripped from physfs package
dnl AC_ARG_ENABLE(readline,
dnl    AC_HELP_STRING([--enable-externalrcon],[compile external rcon program (default=yes)])
dnl    , ,enable_rcon=yes)
AC_ARG_ENABLE(externalrcon,[  --enable-externalrcon   compile external rcon program (default=no)])
if test x$enable_externalrcon = xyes; then
  AC_CHECK_HEADER(readline/readline.h, have_readline_hdr=yes)
  AC_CHECK_LIB(readline, readline, have_readline_lib=yes, , -lncurses )
  AC_CHECK_HEADER(readline/history.h, have_history_hdr=yes)
  AC_CHECK_LIB(readline, add_history, have_history_lib=yes, , -lncurses )
  if test x$have_readline_hdr = xyes -a x$have_readline_lib = xyes; then
    if test x$have_history_hdr = xyes -a x$have_history_lib = xyes; then
      XQFRCON="xqf-rcon";
      AC_SUBST(XQFRCON)
      XQFRCON_LIBS="-lreadline -lncurses"
      AC_SUBST(XQFRCON_LIBS)
    else
      AC_MSG_WARN([libreadline not found, rcon program disabled])
    fi
  else
    AC_MSG_WARN([libreadline not found, rcon program disabled])
  fi
fi

dnl determine whether GeoIP should be used
AC_CHECK_HEADER(GeoIP.h,have_geoip_hdr=yes,have_geoip_hdr=no)
AC_MSG_CHECKING([whether GeoIP should be used])
AC_ARG_ENABLE(geoip,[  --enable-geoip    		use GeoIP (default=auto)],USE_GEOIP=$enableval, USE_GEOIP=yes)
AC_MSG_RESULT([$USE_GEOIP])

if test "x$USE_GEOIP" != "xno"; then
	if test "x$have_geoip_hdr" = "xyes";then
  		AC_DEFINE_UNQUOTED(USE_GEOIP,1,Define if we should use GeoIP)
		if test "x$USE_GEOIP" = "xyes"; then
			GEOIP_LIB="-lGeoIP"
		else
			GEOIP_LIB="$USE_GEOIP"
		fi
  		AC_SUBST(GEOIP_LIB)
		
	else
		AC_MSG_WARN([GeoIP.h not found, GeoIP feature disabled])
	fi
fi

dnl check if user wants bzip2 compression instead of gzip
COMPRESSION="-DCOMPRESSOR_GZIP"
AC_ARG_ENABLE(bzip2,[  --enable-bzip2          use bzip2 for data compression],COMPRESSION="-DCOMPRESSOR_BZIP2")
AC_SUBST(COMPRESSION)

dnl check if user wants debug
AC_ARG_ENABLE(debug,[  --enable-debug          turn on debugging ],DEBUG="-DDEBUG" CFLAGS="-g -O0", DEBUG="")
AC_SUBST(DEBUG)

AC_SUBST(VERSION)
AC_SUBST(QSTATEXEC)

AC_DEFINE_UNQUOTED(XQF_VERSION, "$VERSION", XQF Version number)
AC_DEFINE_UNQUOTED(QSTAT_EXEC, "$QSTATEXEC", QSTAT executable path)

# workaround for intl/ which requires config.h
echo "configure: creating link config.h -> src/gnuconfig.h"
test -e config.h -a ! -L config.h && rm config.h
test ! -e config.h && ln -s src/gnuconfig.h config.h

rm -f intl/libintl.h
# damn gettext should do that itself!
if test "$USE_INCLUDED_LIBINTL" = "yes"; then
	echo "configure: creating link intl/libintl.h -> libgnuintl.h"
	ln -s libgnuintl.h intl/libintl.h
fi

dnl Use -Wall if we have gcc.
changequote(,)dnl
if test "x$GCC" = "xyes"; then
  case " $CFLAGS " in
  *[\ \	]-Wall[\ \	]*) ;;
  *) CFLAGS="$CFLAGS -Wall" ;;
  esac
fi
changequote([,])dnl

AC_ARG_ENABLE(profiling,[  --enable-profiling   compile with profiling (default=no)], enable_profile=yes, )
AC_MSG_CHECKING(whether profiling is requested)
if test x$enable_profile = xyes; then
	CFLAGS="$CFLAGS -pg"
	AC_MSG_RESULT([yes])
else
	AC_MSG_RESULT([no])
fi

AC_CONFIG_FILES([
	Makefile
	src/Makefile
	src/xpm/Makefile
	src/zip/Makefile
	docs/Makefile
	pixmaps/Makefile
	pixmaps/flags/Makefile
	xqf.spec
	po/Makefile.in
])
AC_OUTPUT

if test "x$qstat_is" = "xnotfound" ; then
	AC_MSG_RESULT([
*** QStat is *required* to run XQF
*** Get it from http://qstat.org/
*** and put it in your path
])
elif test "x$qstat_is" = "xtooold" ; then
	AC_MSG_RESULT([
*** You have an old QStat version installed
*** QStat 2.4e is recommended to run XQF
*** Get it from http://qstat.org/
])
fi
